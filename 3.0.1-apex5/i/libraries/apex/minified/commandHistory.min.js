!function(ns,debug,$){"use strict";var makeCommandHistory=function(){function checkUndo(){if(0>present)throw"Command history nothing to undo"}function checkRedo(){if(present>=history.length-1)throw"Command history nothing to redo"}var history=[],present=-1,errorHandler=null,baseCommandPrototype={execute:function(){},undo:function(){},redo:function(){return this.execute()},label:function(){return""}};return{clear:function(){history=[],present=-1,$(document).trigger("commandHistoryChange")},execute:function(command){try{debug.info("Execute command: "+command.label()),command.execute()}catch(ex){return debug.error("Exception during execute command.",ex),void(errorHandler&&errorHandler("execute",command,ex))}present+=1,present<history.length&&(history.length=present),history.push(command),$(document).trigger("commandHistoryChange")},undo:function(){checkUndo();try{debug.info("Undo command: "+history[present].label()),history[present].undo()}catch(ex){debug.error("Exception during undo command.",ex),errorHandler&&errorHandler("undo",history[present],ex),history.length=present}present-=1,$(document).trigger("commandHistoryChange")},redo:function(){checkRedo(),present+=1;try{debug.info("Redo command: "+history[present].label()),history[present].redo()}catch(ex){debug.error("Exception during redo command.",ex),errorHandler&&errorHandler("redo",history[present],ex),history.length=present,present-=1}$(document).trigger("commandHistoryChange")},canUndo:function(){return present>=0},canRedo:function(){return present<history.length-1},undoLabel:function(){return checkUndo(),history[present].label()},redoLabel:function(){return checkRedo(),history[present+1].label()},setErrorHandler:function(fn){errorHandler=fn},getErrorHandler:function(){return errorHandler},baseCommand:function(){return Object.create(baseCommandPrototype)}}};ns.commandHistory=makeCommandHistory(),ns.commandHistory.newCommandHistory=makeCommandHistory}(apex,apex.debug,apex.jQuery);